(role white)
(role black)

(index 0)
(index 1)
(index 2)
(index 3)
(index 4)
(index 5)
(index 6)
(index 7)
(index 8)
(index 9)
(index 10)

(init (step s1) (white beaten 0) (black beaten 0))

(<= (legal white (play white action))
    (role white))
(<= (legal white (play black action))
    (role white)
  (not (true (role black))))
(<= (legal black (play white action))
    (role black)
  (not (true (role white))))
(<= (legal black (play black action))
    (role black))

(<= (next (step sN) (white action whiteAction) (black action blackAction) (white beaten whiteBeaten) (black beaten blackBeaten))
    (role?player)
    (does?player (play?opponent action)))
(<= (next (step sN+1) (white action whiteAction) (black action blackAction) (white beaten whiteBeaten) (black beaten blackBeaten))
    (true (step sN) (white action whiteAction) (black action blackAction) (white beaten whiteBeaten) (black beaten blackBeaten)))
(<= (next (white beaten newWhiteBeaten) (black beaten newBlackBeaten))
    (true (white beaten whiteBeaten) (black beaten blackBeaten))
    (or 
      (and (true (action whiteAction rock)) (true (action blackAction scissors)))
      (and (true (action whiteAction paper)) (true (action blackAction rock)))
      (and (true (action whiteAction scissors)) (true (action blackAction paper)))
      (and (true (action whiteAction well)) (true (action blackAction rock)))
      (and (true (action whiteAction well)) (true (action blackAction scissors)))
      (not (true (action whiteAction blackAction)))))
(<= (next (white beaten newWhiteBeaten) (black beaten newBlackBeaten))
    (true (white beaten whiteBeaten) (black beaten blackBeaten))
    (not 
      (or 
        (and (true (action whiteAction rock)) (true (action blackAction scissors)))
        (and (true (action whiteAction paper)) (true (action blackAction rock)))
        (and (true (action whiteAction scissors)) (true (action blackAction paper)))
        (and (true (action whiteAction well)) (true (action blackAction rock)))
        (and (true (action whiteAction well)) (true (action blackAction scissors))))))
(<= (next (step s10) (white beaten whiteBeaten) (black beaten blackBeaten))
    (true (step s9) (white beaten whiteBeaten) (black beaten blackBeaten)))
(<= (next (step sN+1) (white beaten whiteBeaten) (black beaten blackBeaten))
    (true (step sN) (white beaten whiteBeaten) (black beaten blackBeaten))
    (true (role white))
    (not (true (role black))))

(<= terminal
    (or 
      (index?i)
      (true (white beaten 5)))
    (or 
      (index?i)
      (true (black beaten 5)))
    (or 
      (index?i)
      (true (step s10))))

(<= (goal white 100)
    (index?i)
    (true (white beaten?j))
    (true (black beaten?k))
    (>=?j?k))
(<= (goal white 50)
    (index?i)
    (true (white beaten?j))
    (true (black beaten?k))
    (=?j?k))
(<= (goal white 0)
    (index?i)
    (true (white beaten?j))
    (true (black beaten?k))
    (>=?k?j))
(<= (goal black 100)
    (index?i)
    (true (white beaten?j))
    (true (black beaten?k))
    (>=?k?j))
(<= (goal black 50)
    (index?i)
    (true (white beaten?j))
    (true (black beaten?k))
    (=?j?k))
(<= (goal black 0)
    (index?i)
    (true (white beaten?j))
    (true (black beaten?k))
    (>=?j?k))

(<= (action?i rock)
    (index?i)
    (oneof?i rock paper scissors well))
(<= (action?i paper)
    (index?i)
    (oneof?i rock paper scissors well))
(<= (action?i scissors)
    (index?i)
    (oneof?i rock paper scissors well))
(<= (action?i well)
    (index?i)
    (oneof?i rock paper scissors well))

(<= (beaten?i?j)
    (index?i)
    (index?j)
    (>=?j 0)
    (>=?i 0))