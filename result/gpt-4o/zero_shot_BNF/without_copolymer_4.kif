(role red)
(role blue)

(init (control red))
(init (pieces red 0))
(init (pieces blue 0))

(<= (legal ?player (move ?x ?n))
    (role ?player)
    (true (control ?player))
    (empty ?x ?n))

(<= (legal ?player noop)
    (role ?player)
    (not (true (control ?player))))

(<= (next (control red))
    (true (control blue))
    (not (adjacent-opposing ?x ?n blue)))

(<= (next (control blue))
    (true (control red))
    (not (adjacent-opposing ?x ?n red)))

(<= (next (control ?player))
    (true (control ?player))
    (adjacent-opposing ?x ?n ?opponent))

(<= (next (pieces ?player ?newCount))
    (role ?player)
    (true (pieces ?player ?count))
    (does ?player (move ?x ?n))
    (succ ?count ?newCount))

(<= (next (pieces ?player ?count))
    (role ?player)
    (true (pieces ?player ?count))
    (does ?opponent noop))

(<= (next (occupied ?x ?n ?player))
    (role ?player)
    (does ?player (move ?x ?n)))

(<= (next (occupied ?x ?n ?player))
    (true (occupied ?x ?n ?player)))

(<= (terminal)
    (true (pieces red 19)))

(<= (terminal)
    (true (pieces blue 19)))

(<= (goal red 100)
    (true (pieces red 19)))

(<= (goal red 0)
    (true (pieces blue 19)))

(<= (goal blue 100)
    (true (pieces blue 19)))

(<= (goal blue 0)
    (true (pieces red 19)))

(<= (adjacent-opposing ?x ?n ?opponent)
    (role ?opponent)
    (occupied ?x1 ?n1 ?opponent)
    (adjacent ?x ?n ?x1 ?n1))

(<= (empty ?x ?n)
    (not (occupied ?x ?n red))
    (not (occupied ?x ?n blue)))

(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)

% Define the board structure and adjacency relationships
% These predicates must be defined according to the specific board layout
% (adjacent ?x ?n ?x1 ?n1) defines adjacency between cells
% (index ?x) and (index ?n) define the valid range of indices for the board