;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Queens Puzzle.
;;;
;;; Place queens on the board such that none are attacking each other.  On an
;;; NxN board, it's possible to place N queens (except for 2x2 and 3x3).
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role robot)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Base propositions.
;
; - Each cell has a queen or is blank.
; - The player can be placing the nth queen.
; - The player can have chosen to quit.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (cell ?row ?col ?type))
    (number ?row)
    (number ?col)
    (type ?type))

(<= (base (placing ?n))
    (number ?n))

(base finished)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Inputs.
;
; - Each turn consists of placing a queen.
; - The player can choose to quit.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (input robot (place ?row ?col))
    (number ?row)
    (number ?col))

(input robot quit)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initial state.
;
; - All cells are blank.
; - The player is placing the first queen.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (init (cell ?row ?col blank))
    (number ?row)
    (number ?col))

(init (placing 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Legal moves.
;
; A queen can be placed on an blank cell provided that cell isn't being attacked
; by another queen.
;
; The player can always quit (which will become the only legal move at some
; point following a mistake).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (legal robot (place ?row ?col))
    (true (cell ?row ?col blank))
    (not (attacked ?row ?col))
    )

(legal robot quit)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Next state calculations.
;
; - Cells that are played gain a queen.
; - All other cells retain their existing state.
; - The queen being placed moves on.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (cell ?row ?col queen))
    (does robot (place ?row ?col)))

(<= (next (cell ?row ?col ?type))
    (true (cell ?row ?col ?type))
    (not (does robot (place ?row ?col))))

(<= (next (placing ?n2))
    (true (placing ?n1))
    (succ ?n1 ?n2))

(<= (next finished)
    (does robot quit))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Terminality.
;
; The game is over when the player no longer has any queens left to place or
; when the player quits.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal
    (true finished))

(<= terminal
    (not still_placing))

(<= still_placing
    (true (placing ?n)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Goal.
;
; - Score 0 if the player quits.
; - Otherwise score 100.  (The other requirements are always met because of the
;   legals.)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal robot 0)
    (true finished))

(<= (goal robot 100)
    (not (goal robot 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General functions.
;
; - Maths.
; - Piece types.
; - Whether a cell is being attacked by a queen.
;   - True if there's a queen in the same row.
;   - True if there's a queen in the same column.
;   - True if there's a queen in the same NE diagonal (row + col = CONST).
;   - True if there's a queen in the same NW diagonal (row - col = CONST)
;     => CONST + col = row (but note than CONST might need to be negative).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (number ?n)
    (succ ?n ?m))

(<= (number ?m)
    (succ ?n ?m))

(<= (ext_succ ?n1 ?n2)
    (succ ?n1 ?n2))

(<= (ext_number ?n)
    (ext_succ ?n ?m))

(<= (ext_number ?m)
    (ext_succ ?n ?m))

(<= (plus ?n 0 ?n)
    (ext_number ?n))

(<= (plus ?x ?y ?z)
    (ext_succ ?y2 ?y)
    (ext_succ ?x ?x2)
    (plus ?x2 ?y2 ?z))

(type queen)
(type blank)

(<= (attacked ?row ?col)
    (true (cell ?row ?col2 queen))
    (number ?col))

(<= (attacked ?row ?col)
    (true (cell ?row2 ?col queen))
    (number ?row))

(<= (attacked ?row ?col)
    (true (cell ?row2 ?col2 queen))
    (plus ?row ?col ?c)
    (plus ?row2 ?col2 ?c))

(<= (attacked ?row ?col)
    (true (cell ?row2 ?col2 queen))
    (plus ?c ?col ?row)
    (plus ?c ?col2 ?row2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data specific to this instance of the problem.
;
; - The successor relation (of the correct size for the puzzle in question).
; - The extended successor relation (up to twice the board size and down to
;   negative board size).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(succ  1  2)
(succ  2  3)
(succ  3  4)
(succ  4  5)
(succ  5  6)
(succ  6  7)
(succ  7  8)
(succ  8  9)
(succ  9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)

(ext_succ m31 m30)
(ext_succ m30 m29)
(ext_succ m29 m28)
(ext_succ m28 m27)
(ext_succ m27 m26)
(ext_succ m26 m25)
(ext_succ m25 m24)
(ext_succ m24 m23)
(ext_succ m23 m22)
(ext_succ m22 m21)
(ext_succ m21 m20)
(ext_succ m20 m19)
(ext_succ m19 m18)
(ext_succ m18 m17)
(ext_succ m17 m16)
(ext_succ m16 m15)
(ext_succ m15 m14)
(ext_succ m14 m13)
(ext_succ m13 m12)
(ext_succ m12 m11)
(ext_succ m11 m10)
(ext_succ m10  m9)
(ext_succ  m9  m8)
(ext_succ  m8  m7)
(ext_succ  m7  m6)
(ext_succ  m6  m5)
(ext_succ  m5  m4)
(ext_succ  m4  m3)
(ext_succ  m3  m2)
(ext_succ  m2  m1)
(ext_succ  m1   0)
(ext_succ   0   1)
(ext_succ   1   2)
(ext_succ   2   3)
(ext_succ   3   4)
(ext_succ   4   5)
(ext_succ   5   6)
(ext_succ   6   7)
(ext_succ   7   8)
(ext_succ   8   9)
(ext_succ   9  10)
(ext_succ  10  11)
(ext_succ  11  12)
(ext_succ  12  13)
(ext_succ  13  14)
(ext_succ  14  15)
(ext_succ  15  16)
(ext_succ  16  17)
(ext_succ  17  18)
(ext_succ  18  19)
(ext_succ  19  20)
(ext_succ  20  21)
(ext_succ  21  22)
(ext_succ  22  23)
(ext_succ  23  24)
(ext_succ  24  25)
(ext_succ  25  26)
(ext_succ  26  27)
(ext_succ  27  28)
(ext_succ  28  29)
(ext_succ  29  30)
(ext_succ  30  31)
(ext_succ  31  32)
(ext_succ  32  33)
(ext_succ  33  34)
(ext_succ  34  35)
(ext_succ  35  36)
(ext_succ  36  37)
(ext_succ  37  38)
(ext_succ  38  39)
(ext_succ  39  40)
(ext_succ  40  41)
(ext_succ  41  42)
(ext_succ  42  43)
(ext_succ  43  44)
(ext_succ  44  45)
(ext_succ  45  46)
(ext_succ  46  47)
(ext_succ  47  48)
(ext_succ  48  49)
(ext_succ  49  50)
(ext_succ  50  51)
(ext_succ  51  52)
(ext_succ  52  53)
(ext_succ  53  54)
(ext_succ  54  55)
(ext_succ  55  56)
(ext_succ  56  57)
(ext_succ  57  58)
(ext_succ  58  59)
(ext_succ  59  60)
(ext_succ  60  61)
(ext_succ  61  62)

