The game takes place in an abstract programming environment where the state is defined by lines of code indexed by line numbers and register values indexed by register numbers; line numbers range up to a maximum of 10, and registers up to 5, with a maximum of 50 execution steps allowed. There are two player roles: the coder and the debugger, who take turns acting, with the coder initiating actions when in the coding phase and the debugger responding by testing instructions. Initially, the coder begins with the line to add set to 1 and all registers initialized to zero. During the coder's turn, when coding is active, they may legally write an instruction or signal done to end coding; if coding is not active, the coder can perform a noop, which is a no-operation action. Each action from the coder is formatted either as done or write followed by a valid instruction, where valid instructions include zeroing a register, incrementing a register, moving a value from one register to another, or performing a conditional branch if two registers are equal to a specified line. The debugger's action consists of testing pairs of line numbers to trigger code execution. Actions cause state changes such as adding lines of code at the current line number, incrementing the line-to-add counter, updating the program counter (pc), modifying register values according to the current instruction, and advancing the step count by one. Automatic events include the evaluation of instructions during execution: zeroing sets a register to zero, incrementing increases a register's value by one, moving copies a value between registers, and branching alters the program counter based on register comparisons, with the program counter advancing sequentially unless a branch is taken. Implicit constraints enforce that line numbers and registers remain within their defined maximums; the program counter must refer to existing lines of code, and instructions operate only on valid registers and lines. The game terminates either when the program counter reaches beyond the last line of code (indicating the program ran to completion) or the maximum number of steps (50) is reached. Victory is determined by the correctness of the program run: the coder scores 100 points if the program halts correctly with register 1 holding the expected correct value, and zero points otherwise. Thus, the coder's objective is to write a valid program within the line and register limits that executes correctly within the step limit, while the debugger tests the code execution through interactions that advance the program state.