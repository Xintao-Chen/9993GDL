The game is set on two distinct 3-position stacks, each consisting of positions labeled a, b, and c, arranged as part of two separate subgames, with the first subgame involving positions a1, b1, and c1, and the second subgame involving a2, b2, and c2; these positions serve as locations where pieces can be stacked or unstacked, with base positions marked as tables. The coordinate system distinguishes these two subgames by indexing positions with suffixes 1 or 2, representing the first and second subgame respectively. There is a single player role named "robot," who takes all turns sequentially, starting from an initial state where positions b1 and c1 are clear except for c1 being on a1, and similarly b2 and c2 are clear with c2 on a2, and all a and b positions are tables. The game progresses in discrete steps from 1 to 4, with the step number incrementing automatically after each action. On each turn, the robot must perform one move chosen from four possible move types—ss (stack-stack), su (stack-unstack), us (unstack-stack), and uu (unstack-unstack)—each involving moving a piece from one position in either the first or second subgame to another position also in one of the subgames, with the action format being (do <move> ?x1 ?y1 ?x2 ?y2) where ?x1 and ?y1 are source coordinates in the first subgame and ?x2 and ?y2 in the second, or vice versa, depending on the move type. Legality of each move depends on the positions involved belonging to their respective subgames, the source and destination positions satisfying stacking or unstacking conditions, and the involved positions being clear or occupied appropriately; for example, stacking requires the destination to be a clear table position distinct from the source, and unstacking requires the source to be on top of another piece and clear. The game enforces occupancy constraints such that only one piece can occupy a position at a time, and pieces can only be placed on tables or on top of other pieces within their subgame. After each legal move, the state updates the on, clear, and table relations for both subgames accordingly, reflecting the movement of pieces and clearing or occupying positions; the step counter increments automatically. The game terminates either when four steps have been completed or when both subgames achieve a full stack with a1 supporting b1 which supports c1, and a2 supporting b2 which supports c2. Scoring is determined by whether each subgame attains this full stacked configuration: if both subgames reach full stacks, the robot scores 100 points; if only one subgame achieves this, the score is 50; if neither does, the score is 0. The robot must thus strategically manipulate the pieces across both subgames within four moves to maximize its score by creating these complete stacks or partial successes.