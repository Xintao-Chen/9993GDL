;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Queens Puzzle.
;;;
;;; Place queens on the board such that none are attacking each other.  On an
;;; NxN board, it's possible to place N queens (except for 2x2 and 3x3).
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(role robot)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; - Each cell has a queen or is blank.
; - The player can be placing the nth queen.
; - The player can have chosen to quit.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; - Each turn consists of placing a queen.
; - The player can choose to quit.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initial state.
;
; - All cells are blank.
; - The player is placing the first queen.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= (init (cell ?row ?col blank))
    (number ?row)
    (number ?col))
(init (placing 1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Legal moves.
;
; A queen can be placed on an blank cell provided that cell isn't being attacked
; by another queen.
;
; The player can always quit (which will become the only legal move at some
; point following a mistake).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= (legal robot (place ?row ?col))
    (true (cell ?row ?col blank))
    (not (attacked ?row ?col))
    )
(legal robot quit)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Next state calculations.
;
; - Cells that are played gain a queen.
; - All other cells retain their existing state.
; - The queen being placed moves on.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= (next (cell ?row ?col queen))
    (does robot (place ?row ?col)))
(<= (next (cell ?row ?col ?type))
    (true (cell ?row ?col ?type))
    (not (does robot (place ?row ?col))))
(<= (next (placing ?n2))
    (true (placing ?n1))
    (succ ?n1 ?n2))
(<= (next finished)
    (does robot quit))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Terminality.
;
; The game is over when the player no longer has any queens left to place or
; when the player quits.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= terminal
    (true finished))
(<= terminal
    (not still_placing))
(<= still_placing
    (true (placing ?n)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Goal.
;
; - Score 0 if the player quits.
; - Otherwise score 100.  (The other requirements are always met because of the
;   legals.)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= (goal robot 0)
    (true finished))
(<= (goal robot 100)
    (not (goal robot 0)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General functions.
;
; - Maths.
; - Piece types.
; - Whether a cell is being attacked by a queen.
;   - True if there's a queen in the same row.
;   - True if there's a queen in the same column.
;   - True if there's a queen in the same NE diagonal (row + col = CONST).
;   - True if there's a queen in the same NW diagonal (row - col = CONST)
;     => CONST + col = row (but note than CONST might need to be negative).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= (number ?n)
    (succ ?n ?m))
(<= (number ?m)
    (succ ?n ?m))
(<= (ext_succ ?n1 ?n2)
    (succ ?n1 ?n2))
(<= (ext_number ?n)
    (ext_succ ?n ?m))
(<= (ext_number ?m)
    (ext_succ ?n ?m))
(<= (plus ?n 0 ?n)
    (ext_number ?n))
(<= (plus ?x ?y ?z)
    (ext_succ ?y2 ?y)
    (ext_succ ?x ?x2)
    (plus ?x2 ?y2 ?z))
(type queen)
(type blank)
(<= (attacked ?row ?col)
    (true (cell ?row ?col2 queen))
    (number ?col))
(<= (attacked ?row ?col)
    (true (cell ?row2 ?col queen))
    (number ?row))
(<= (attacked ?row ?col)
    (true (cell ?row2 ?col2 queen))
    (plus ?row ?col ?c)
    (plus ?row2 ?col2 ?c))
(<= (attacked ?row ?col)
    (true (cell ?row2 ?col2 queen))
    (plus ?c ?col ?row)
    (plus ?c ?col2 ?row2))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data specific to this instance of the problem.
;
; - The successor relation (of the correct size for the puzzle in question).
; - The extended successor relation (up to twice the board size and down to
;   negative board size).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(ext_succ m8 m7)
(ext_succ m7 m6)
(ext_succ m6 m5)
(ext_succ m5 m4)
(ext_succ m4 m3)
(ext_succ m3 m2)
(ext_succ m2 m1)
(ext_succ m1  0)
(ext_succ  0  1)
(ext_succ  1  2)
(ext_succ  2  3)
(ext_succ  3  4)
(ext_succ  4  5)
(ext_succ  5  6)
(ext_succ  6  7)
(ext_succ  7  8)
(ext_succ  8  9)
(ext_succ  9 10)
(ext_succ 10 11)
(ext_succ 11 12)
(ext_succ 12 13)
(ext_succ 13 14)
(ext_succ 14 15)
(ext_succ 15 16)
