import argparse
import os
import re
import subprocess
import sys
from datetime import datetime
from typing import Tuple, Dict, Any, List
from enum import Enum

checker_script = "game_checker/gamechecker/gamechecker.sh"

class CheckResult(Enum):
    PASSED = "PASS"
    SYNTAX_FAIL = "SYNTAX_FAIL"
    SEMANTIC_RULE_FAIL = "SEMANTIC_RULE_FAIL"
    SEMANTIC_LOGIC_FAIL = "SEMATNTIC_LOGIC_FAIL"

def run_checker(gdl_file_path):
    result = subprocess.run(
        [checker_script, "--mc-time=5", gdl_file_path],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        timeout=30
    )
    output = result.stdout + result.stderr
    if "error while parsing gdl!" in output:
        result_flag = CheckResult.SYNTAX_FAIL
    elif "ERROR: unsafe rule" in output:
        result_flag = CheckResult.SEMANTIC_RULE_FAIL
    elif "checking game tree with random walks" in output and "ERROR:" in output:
        result_flag = CheckResult.SEMANTIC_LOGIC_FAIL
    else:
        result_flag = CheckResult.PASSED

    return result_flag, result.stdout + result.stderr


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Evaluate the GDL generated by LLM")
    parser.add_argument("--flag", required=True, choices=["zero_shot", "one_shot", "zero_shot_BNF", "one_shot_BNF", "iterative", "llama_one_shot_BNF", "SFT_llama_one_shot_BNF"], help="Choose inference style")
    args = parser.parse_args()

    if args.flag == "zero_shot":
        gdl_dir = "result/gpt-4o/zero_shot"
        out_path = "evaluate/gpt-4o/zero_shot"
    elif args.flag == "zero_shot_BNF":
        gdl_dir = "result/gpt-4o/zero_shot_BNF"
        out_path = "evaluate/gpt-4o/zero_shot_BNF"
    elif args.flag == "one_shot":
        gdl_dir = "result/gpt-4o/one_shot"
        out_path = "evaluate/gpt-4o/one_shot"
    elif args.flag == "one_shot_BNF":
        gdl_dir = "result/gpt-4o/one_shot_BNF"
        out_path = "evaluate/gpt-4o/one_shot_BNF"
    elif args.flag == "iterative":
        gdl_dir = "result/gpt-4o_iterative"
        out_path = "evaluate/gpt-4o_iterative"
    elif args.flag == "llama_one_shot_BNF":
        gdl_dir = "result/llama/one_shot_BNF"
        out_path = "evaluate/llama/one_shot_BNF"
    elif args.flag == "SFT_llama_one_shot_BNF":
        gdl_dir = "result/llama/SFT_one_shot_BNF"
        out_path = "evaluate/llama/SFT_one_shot_BNF"
    else:
        raise ValueError("Unsupported flag")

    total = 0
    files = {
        CheckResult.PASSED: 0,
        CheckResult.SYNTAX_FAIL: 0,
        CheckResult.SEMANTIC_RULE_FAIL: 0,
        CheckResult.SEMANTIC_LOGIC_FAIL: 0,
    }

    for filename in os.listdir(gdl_dir):
        if not filename.endswith(".kif"):
            continue

        total += 1
        file_path = os.path.join(gdl_dir, filename)

        result_flag, _ = run_checker(file_path)

        files[result_flag] += 1

    txt_path = os.path.join(out_path, "analyze.txt")

    os.makedirs(out_path, exist_ok=True)

    with open(txt_path, "w", encoding="utf-8") as f:
        f.write(f"Total: {total}\n")
        for k, v in files.items():
            f.write(f"{k.name} {v}\n")
    
    print(f"Finish: {args.flag}")